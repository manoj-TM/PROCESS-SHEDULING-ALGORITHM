# PROCESS-SHEDULING-ALGORITHM
implementing roundrobin and sjf algorithm in c programme.
#include<stdio.h>

void roundrobin()
{
	int proc=0,qua=0;
	int brust[10],rem[10][2],thr[10],ref[10];
	int i=0,j=0;
	int value=0,temp1=0,temp2=0;
	int key=0;
	float f1,f2;

	printf("ROUNDROBIN\n");
	printf("enter the number of process:");
	scanf("%d",&proc);
	printf("enter the quantum value:");
	scanf("%d",&qua);
	printf("enter the brust time in sequence:");

	for(i=0;i<proc;i++)
	{
		scanf("%d",&brust[i]);
		ref[i]=brust[i];
		value=value+brust[i];
		thr[i]=0;
	}
	for(i=0;i<proc;i++)
		for(j=0;j<proc;j++)
			rem[i][j]=0;

	while(value!=key)
	{
		for(i=0;i<proc;i++)
		{
			if(brust[i]==0)
				continue;

			else if(brust[i]>=qua)
			{
				rem[i][0]=rem[i][0]+(key-rem[i][1]);
				brust[i]=brust[i]-qua;
				key=key+qua;
				if(brust[i]==0)
				{
					thr[i]=key;
					rem[i][1]=0;
				}
				else
					rem[i][1]=key;
			}
			
			else
			{
				rem[i][0]=rem[i][0]+(key-rem[i][1]);

				key=key+brust[i];
				thr[i]=key;
				brust[i]=0;
				rem[i][1]=0;
			}
		}
	}

	for(i=0;i<proc;i++)
	{
		temp1=temp1+thr[i];
		temp2=temp2+rem[i][0];
	}

printf("processID\tbrusttime\twaitingtime\tthroughput\n");
for(i=0;i<proc;i++)
{
	printf("%d\t\t%d\t\t%d\t\t%d\n",i+1,ref[i],rem[i][0],thr[i]);
}
f1=(temp1/proc);
f2=(temp2/proc);
	printf("avg throughput time=%f\naverage waiting time=%f\n",f1,f2);

}

void sjf()
{
	int ref[10],rem[10][10],cal[20][20],thr[10],wai[10];
	int p,value=0,time=0,arr=-1,temp1,temp2,count=0,flag,c1=0,c2=0;
	int i,j,k,ref1=0;

	printf("enter the number of process: ");
	scanf("%d",&p);
	printf("enter the details:\n");
	for(i=0;i<p;i++)
	{
		printf("enter the brust time of the process %d   :",i);
		scanf("%d",&rem[i][0]);
		ref[i]=rem[i][0];
		value=value+rem[i][0];
		printf("enter the arrival time of the process %d :",i);
		scanf("%d",&rem[i][1]);
		if(rem[i][1]>arr)
		{
			arr=rem[i][1];
		}
		wai[i]=0;
		thr[i]=0;		
	}

	while(value!=time)
	{
		if(time<=arr)
		{
			temp1=3200;
			for(i=0;i<p;i++)
			{
				if(rem[i][0]!=0 && rem[i][1]<=time && rem[i][0]<temp1)
				{
					temp1=rem[i][0];
					temp2=i;
				}
			}
			cal[count][0]=time;
			time=time+1;
			cal[count][1]=time;
			cal[count][2]=temp2;
			rem[temp2][0]=rem[temp2][0]-1;
			count=count+1;
		}

		else
		{
			temp1=3200;
			for(i=0;i<p;i++)
			{
				if(rem[i][0]!=0 && rem[i][0]<temp1)
				{
					temp1=rem[i][0];
					temp2=i;
				}
			}
			cal[count][0]=time;
			time=time+rem[temp2][0];
			cal[count][1]=time;
			cal[count][2]=temp2;
			rem[temp2][0]=0;
			count=count+1;			
		}
		
	}

	for(i=0;i<p;i++)
	{
		for(j=count-1;j>=0;j--)
		{
			if(cal[j][2]==i)
			{
				thr[i]=cal[j][1];
				break;
			}
		}
	}
	
	for(i=0;i<p;i++)
	{
		flag=1;
		for(j=0;j<count;j++)
		{
			if(cal[j][2]==i)
			{
				if(flag=1)
				{
					wai[i]=wai[i]+(cal[j][0]-rem[i][1]);
					ref1=cal[j][1];
					flag=0;
				}
				else
				{
					wai[i]=wai[i]+(cal[j][0]-ref1);
					ref1=cal[j][1];					
				}
			}
		}
	}
	
	for(i=0;i<p;i++)
	{
		c1=c1+thr[i];
		c2=c2+wai[i];	
	}

	printf("process_no\t\tbrust_time\t\tarrive_time\t\tturnaround_time\t\twait_time\n");
	for(i=0;i<p;i++)
	{
		printf("%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n",i,ref[i],rem[i][1],thr[i],wai[i]);
	}
	printf("the average turnaround time is %f\nthe average waiting time is %f\n",(float)c1/p,(float)c2/p);
}


 int main() 
{
	int choice=0;
	while(1)
	{
		printf("enter your choice\n1.round robin\n2.sjf\n3.exit\n");  
		scanf("%d",&choice);
		if(choice==1)
		{
			roundrobin();
		}
		else if(choice==2)
		{
			sjf();		
		}
		else
		{
			break;
		}
	}
	return 0;
}
